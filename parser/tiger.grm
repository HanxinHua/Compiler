structure A = Absyn
struct

end
%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | ERROR

%nonterm
		exp | program | lvalue | expseq | explist | field | declarationlist
	| declaration | typedeclaration	| variabledeclaration | functiondeclaration
	| type | typefield | typefields

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword
WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%right ID
%right OF
%right THEN
%right DO
%right ELSE
%right ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left DIVIDE TIMES
%right LBRACE LBRACK LPAREN
%left UMINUS

%change    EQ -> ASSIGN | ASSIGN -> EQ
		|  SEMICOLON ELSE -> ELSE |  ->IN INT END

%%

program	: exp				()


exp:   STRING                           (A.StringExp(STRING, STRINGleft))
	|  INT                                (A.IntExp(INT))
	|  NIL                                (A.NilExp)
	|  lvalue                             (print("lvalue -> exp | "))
	|  MINUS exp  %prec UMINUS            (A.OpExp(0, A.MinusOp, exp))
	|  exp PLUS exp                       (A.OpExp(exp1, A.PlusOp, exp2))
	|  exp MINUS exp                      (A.opExp(exp1, A.MinusOp, exp2))
	|  exp TIMES exp                      (A.opExp(exp1, A.TimesOp, exp2))
	|  exp DIVIDE exp                     (print("div | "))
	|  exp AND exp                        (print("and | "))
	|  exp OR exp                         (print("or | "))
	|  exp EQ exp                         (print("eq | "))
	|  exp NEQ exp                        (print("neq | "))
	|  exp LT exp                         (print("lt | "))
	|  exp LE exp                         (print("le | "))
	|  exp GT exp                         (print("gt | "))
	|  exp GE exp                         (print("ge | "))
	|  lvalue ASSIGN exp                  (print("lvalue assign exp | "))
	|  ID LPAREN explist RPAREN           (print(ID ^ "(expresslist) | "))
	|  LPAREN expseq RPAREN               (print("(expreseq) | "))
	|  ID LBRACE field RBRACE             (print(ID ^ "{field} | "))
	|  ID LBRACK exp RBRACK OF exp        (print(ID ^ "[exp] of exp | "))
	|  IF exp THEN exp                    (print("end if exp then exp | "))
	|  IF exp THEN exp ELSE exp           (print("end if exp then exp else exp | "))
	|  WHILE exp DO exp                   (print("end while exp do exp | "))
	|  FOR ID ASSIGN exp TO exp DO exp    (print("end for " ^ ID ^ " := start to end do exp | "))
	|  BREAK                              (BREAKleft)
	|  LET declarationlist IN expseq END  (print("end let in block | "))
	|  LPAREN ERROR RPAREN                (ERROR)

lvalue: ID                     (A.symbol(ID))
	   |lvalue DOT ID            ()
	   |lvalue LBRACK exp RBRACK ()

expseq:   exp                 (exp :: nil)
	  | expseq SEMICOLON exp    (exp :: expseq)
		| ERROR  SEMICOLON exp    (exp :: ERROR)

explist:  exp           (exp :: nil)
		| explist COMMA exp (exp :: explist)
		| ERROR   COMMA exp (exp :: ERROR)

declarationlist: declaration           (declaration :: nil)
				 | declarationlist declaration (declaration :: declarationlist)

declaration: typedeclaration  ()
			| variabledeclaration   ()
			| functiondeclaration   ()

variabledeclaration: VAR ID ASSIGN exp (A.VarDec(A.symbol(ID), ref false,
                                        Option.NONE, exp, VARleft))
					 |VAR ID COLON ID ASSIGN exp (A.VarDec(A.symbol(ID), ref false,
                                        (A.symbol(ID), IDleft), exp, VARleft))

functiondeclaration: FUNCTION ID LPAREN typefields RPAREN EQ exp ()
					 |FUNCTION ID LPAREN typefields RPAREN COLON ID EQ exp ()

field: ID EQ exp             ()
	   | field COMMA ID EQ exp ()

typedeclaration: TYPE ID EQ type (A.TypeDec(A.symbol(ID), A.ty(type), IDleft)

type: ID                        (A.symbol(ID))
    | LBRACE typefields RBRACE  ()
    | LBRACE RBRACE             ()
    | ARRAY OF ID               (A.ArrayTy(A.symbol(ID), ARRAYleft))

typefields: typefield                   (typefield :: nil)
           | typefields COMMA typefield (typefields :: typefield)

typefield: ID COLON ID ()
