structure A = Absyn;
%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | ERROR | LOWPRIORITY

%nonterm
		exp of A.exp | program of A.exp | lvalue of A.var | expseq of (A.exp * pos) list
  | explist of A.exp list | field of (Symbol.symbol * A.exp * pos) list | declarationlist of A.dec list
	| declaration of A.dec | typedeclaration of {name: Symbol.symbol, pos: pos, ty: A.ty}
  | functiondeclaration of A.fundec | typefield of A.field | typefields of A.field list
  | tyDecs of {name: Symbol.symbol, pos: pos, ty: A.ty} list
  |funDecs of A.fundec list | vardec of A.dec | ty of A.ty |tyid of A.symbol

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword
WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN
%nonassoc LOWPRIORITY
%nonassoc FUNCTION TYPE
%nonassoc ID
%nonassoc OF
%nonassoc THEN
%nonassoc DO
%nonassoc ELSE
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left DIVIDE TIMES
%right LBRACE LBRACK LPAREN
%left UMINUS


%change    EQ -> ASSIGN | ASSIGN -> EQ
		|  SEMICOLON ELSE -> ELSE |  ->IN INT END

%%

program	: exp				                    (exp)



exp:   STRING                           (A.StringExp(STRING,STRINGleft))
	|  INT                                (A.IntExp(INT))
	|  NIL                                (A.NilExp)
	|  lvalue                             (A.VarExp lvalue)
	|  MINUS exp  %prec UMINUS            (A.OpExp{left = A.IntExp(0), oper = A.MinusOp,  right = exp,                 pos = MINUSleft})
	|  exp PLUS exp                       (A.OpExp{left = exp1, oper = A.PlusOp,   right = exp2,                pos = PLUSleft})
	|  exp MINUS exp                      (A.OpExp{left = exp1, oper = A.MinusOp,  right = exp2,                pos = MINUSleft})
	|  exp TIMES exp                      (A.OpExp{left = exp1, oper = A.TimesOp,  right = exp2,                pos = TIMESleft})
	|  exp DIVIDE exp                     (A.OpExp{left = exp1, oper = A.DivideOp, right = exp2,                pos = DIVIDEleft})
	|  exp AND exp                        (A.IfExp{test = exp1, then' = exp2,      else' = SOME(A.IntExp(0)),              pos = ANDleft})
	|  exp OR exp                         (A.IfExp{test = exp1, then' = A.IntExp(1),         else' = SOME exp2,           pos = ORleft})
	|  exp EQ exp                         (A.OpExp{left = exp1, oper = A.EqOp,     right = exp2,                pos = EQleft})
	|  exp NEQ exp                        (A.OpExp{left = exp1, oper = A.NeqOp,    right = exp2,                pos = NEQleft})
	|  exp LT exp                         (A.OpExp{left = exp1, oper = A.LtOp,     right = exp2,                pos = LTleft})
	|  exp LE exp                         (A.OpExp{left = exp1, oper = A.LeOp,     right = exp2,                pos = LEleft})
	|  exp GT exp                         (A.OpExp{left = exp1, oper = A.GtOp,     right = exp2,                pos = GTleft})
	|  exp GE exp                         (A.OpExp{left = exp1, oper = A.GeOp,     right = exp2,                pos = GEleft})
	|  lvalue ASSIGN exp                  (A.AssignExp{var = lvalue,               exp = exp,                   pos = ASSIGNleft})
	|  ID LPAREN explist RPAREN           (A.CallExp{func = Symbol.symbol ID,      args = rev explist,              pos = IDleft})
  |  ID LPAREN RPAREN                   (A.CallExp{func = Symbol.symbol ID,      args = [],               pos = IDleft})
	|  LPAREN expseq RPAREN               (A.SeqExp(rev expseq))
	|  tyid LBRACE field RBRACE             (A.RecordExp{fields = rev field, typ = tyid,                  pos=tyidleft})
	|  tyid LBRACK exp RBRACK OF exp        (A.ArrayExp{typ = tyid, size = exp1, init = exp2,         pos = tyidleft})
	|  IF exp THEN exp                    (A.IfExp{test = exp1, then' = exp2,      else' = NONE,                pos = IFleft})
	|  IF exp THEN exp ELSE exp           (A.IfExp{test = exp1, then' = exp2,      else' = SOME exp3,           pos = IFleft})
	|  WHILE exp DO exp                   (A.WhileExp{test = exp1,  body = exp2,                                pos = WHILEleft})
	|  FOR ID ASSIGN exp TO exp DO exp    (A.ForExp{var = Symbol.symbol ID, escape = ref true, lo = exp1, hi = exp2, body = exp3, pos = FORleft})
	|  BREAK                              (A.BreakExp(BREAKleft))
	|  LET declarationlist IN expseq END  (A.LetExp{decs = rev declarationlist, body = A.SeqExp (rev expseq),                      pos = LETleft})

lvalue: ID                     (A.SimpleVar(Symbol.symbol ID, IDleft))
	   | lvalue DOT ID            (A.FieldVar(lvalue, Symbol.symbol ID, lvalueleft) )
	   | tyid LBRACK exp RBRACK (A.SubscriptVar(A.SimpleVar(tyid, tyidleft), exp, tyidleft))
tyid: ID      (Symbol.symbol ID)

expseq:   exp                 ((exp, expleft) :: [])
	  | expseq SEMICOLON exp    ((exp, expleft) :: expseq)


explist:  exp           (exp :: [])
		| explist COMMA exp (exp :: explist)

declarationlist: declaration           (declaration :: [])
				 | declarationlist declaration (declaration :: declarationlist)

declaration: tyDecs %prec LOWPRIORITY (A.TypeDec(rev tyDecs))
			| vardec       (vardec)
			| funDecs %prec LOWPRIORITY     (A.FunctionDec(rev funDecs))

vardec: VAR ID ASSIGN exp (A.VarDec{name=Symbol.symbol ID, escape=ref true,
                                        typ = Option.NONE, init=exp, pos=VARleft})
					 | VAR ID COLON tyid ASSIGN exp (A.VarDec{name=Symbol.symbol ID1, escape=ref true,
                                        typ = Option.SOME((tyid, tyidleft)), init=exp, pos=VARleft})

functiondeclaration: FUNCTION ID LPAREN typefields RPAREN EQ exp ({name = Symbol.symbol ID, params = rev typefields,
															result = NONE,
															body = exp,
															pos = FUNCTIONleft}: A.fundec)
                     | FUNCTION ID LPAREN  RPAREN EQ exp ({name = Symbol.symbol ID, params = [],
															result = NONE,
															body = exp,
															pos = FUNCTIONleft}: A.fundec)
                     | FUNCTION ID LPAREN typefields RPAREN COLON tyid EQ exp ({name = Symbol.symbol ID1, params = rev typefields,
															result = SOME(tyid, tyidleft),
															body = exp,
															pos = FUNCTIONleft}: A.fundec)
                     | FUNCTION ID LPAREN RPAREN COLON tyid EQ exp ({name = Symbol.symbol ID1, params = [],
															result = SOME(tyid, tyidleft),
															body = exp,
															pos = FUNCTIONleft}: A.fundec)

funDecs: functiondeclaration (functiondeclaration :: [])
       | funDecs functiondeclaration (functiondeclaration :: funDecs)

field: ID EQ exp             ((Symbol.symbol ID, exp, IDleft) :: [])
	   | field COMMA ID EQ exp ((Symbol.symbol ID, exp, IDleft) :: field)
	   

typedeclaration: TYPE tyid EQ ty ({name= tyid, ty=ty, pos=tyidleft})

tyDecs: typedeclaration        (typedeclaration :: [])
      | tyDecs typedeclaration (typedeclaration :: tyDecs)

ty: tyid                          (A.NameTy(tyid, tyidleft))
    | LBRACE typefields RBRACE  (A.RecordTy(rev typefields))
    | LBRACE RBRACE             (A.RecordTy([]))
    | ARRAY OF tyid               (A.ArrayTy(tyid, ARRAYleft))

typefields: typefield                   (typefield :: [])
           | typefields COMMA typefield (typefield :: typefields)

typefield: ID COLON tyid ({name = Symbol.symbol ID1, escape = ref true, typ = tyid, pos = ID1left} : A.field)
