%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | ERROR

%nonterm  
		exp | program | lvalue | expseq | explist | field | declarationlist
	| declaration | typedeclaration	| variabledeclaration | functiondeclaration
	| type | typefield | typefields

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword 
WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%right OF
%right THEN
%right DO
%right ELSE
%right ASSIGN 
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left DIVIDE TIMES
%left UMINUS 

%change    EQ -> ASSIGN | ASSIGN -> EQ
		|  SEMICOLON ELSE -> ELSE |  ->IN INT END

%%

program	: exp				()


exp:   STRING                             ()
	|  INT                                ()
	|  NIL                                ()
	|  lvalue                             ()
	|  MINUS exp  %prec UMINUS            ()
	|  exp PLUS exp                       ()
	|  exp MINUS exp                      ()
	|  exp TIMES exp                      ()
	|  exp DIVIDE exp                     ()
	|  exp AND exp                        ()
	|  exp OR exp                         ()
	|  exp EQ exp                         ()
	|  exp NEQ exp                        ()
	|  exp LT exp                         ()
	|  exp LE exp                         ()
	|  exp GT exp                         ()
	|  exp GE exp                         ()
	|  lvalue ASSIGN exp                  ()
	|  ID LPAREN explist RPAREN           ()
	|  LPAREN expseq RPAREN               ()
	|  ID LBRACE field RBRACE             ()
	|  ID LBRACK exp RBRACK OF exp        ()
	|  IF exp THEN exp                    ()
	|  IF exp THEN exp ELSE exp           ()
	|  WHILE exp DO exp                   ()
	|  FOR ID ASSIGN exp TO exp DO exp    ()
	|  BREAK                              ()
	|  LET declarationlist IN expseq END  ()
	|  LPAREN ERROR RPAREN                ()

lvalue: ID                       ()
	   |lvalue DOT ID            ()
	   |lvalue LBRACK exp RBRACK ()

expseq:   exp                   ()
	    | expseq SEMICOLON exp  ()
		| ERROR  SEMICOLON exp  ()

explist:  exp               ()
		| explist COMMA exp ()
		| ERROR   COMMA exp ()

declarationlist: declaration          ()
				 |declarationlist declaration ()

declaration: typedeclaration ()
			|variabledeclaration   ()
			|functiondeclaration   ()

variabledeclaration: VAR ID ASSIGN exp     ()
					 |VAR ID COLON ID ASSIGN exp ()

functiondeclaration: FUNCTION ID LPAREN typefields RPAREN EQ exp     ()
					 |FUNCTION ID LPAREN typefields RPAREN COLON ID EQ exp ()



field: ID EQ exp             ()
	   | field COMMA ID EQ exp ()

typedeclaration: TYPE ID EQ type ()

type: ID                        ()
    | LBRACE typefields RBRACE ()
    | LBRACE RBRACE             ()
    | ARRAY OF ID               ()

typefields: typefield                   ()
           | typefields COMMA typefield ()

typefield: ID COLON ID ()
