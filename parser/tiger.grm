%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | ERROR

%nonterm
		exp | program | lvalue | expseq | explist | field | declarationlist
	| declaration | typedeclaration	| variabledeclaration | functiondeclaration
	| type | typefield | typefields

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword
WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%right ID
%right OF
%right THEN
%right DO
%right ELSE
%right ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left DIVIDE TIMES
%right LBRACE LBRACK LPAREN
%left UMINUS

%change    EQ -> ASSIGN | ASSIGN -> EQ
		|  SEMICOLON ELSE -> ELSE |  ->IN INT END

%%

program	: exp				(print(Int.toString 1))


exp:   STRING                           (print(STRING ^ " | "))
	|  INT                                (print((Int.toString INT) ^ " | "))
	|  NIL                                (print("nil | "))
	|  lvalue                             (print("lvalue | "))
	|  MINUS exp  %prec UMINUS            (print("minus | "))
	|  exp PLUS exp                       (print("plus | "))
	|  exp MINUS exp                      (print("minus | "))
	|  exp TIMES exp                      (print("times | "))
	|  exp DIVIDE exp                     (print("div | "))
	|  exp AND exp                        (print("and | "))
	|  exp OR exp                         (print("or | "))
	|  exp EQ exp                         (print("eq | "))
	|  exp NEQ exp                        (print("neq | "))
	|  exp LT exp                         (print("lt | "))
	|  exp LE exp                         (print("le | "))
	|  exp GT exp                         (print("gt | "))
	|  exp GE exp                         (print("ge | "))
	|  lvalue ASSIGN exp                  (print("lvalue assign exp | "))
	|  ID LPAREN explist RPAREN           (print(ID ^ "(expresslist) | "))
	|  LPAREN expseq RPAREN               (print("(expreseq) | "))
	|  ID LBRACE field RBRACE             (print(ID ^ "{field} | "))
	|  ID LBRACK exp RBRACK OF exp        (print(ID ^ "[exp] of exp | "))
	|  IF exp THEN exp                    (print("if exp then exp | "))
	|  IF exp THEN exp ELSE exp           (print("if exp then exp | "))
	|  WHILE exp DO exp                   (print("while exp do exp | "))
	|  FOR ID ASSIGN exp TO exp DO exp    (print("for " ^ ID ^ " := start to end do exp | "))
	|  BREAK                              (print("break | "))
	|  LET declarationlist IN expseq END  (print("end let in block | "))
	|  LPAREN ERROR RPAREN                (print("error | "))

lvalue: ID                     (print(ID ^ " | "))
	   |lvalue DOT ID            (print("lvalue . " ^ ID ^ " | "))
	   |lvalue LBRACK exp RBRACK (print("lvalue [exp] | "))

expseq:   exp                 ()
	    | expseq SEMICOLON exp  (print("; exp | "))
		| ERROR  SEMICOLON exp    (print("; exp | "))

explist:  exp           ()
		| explist COMMA exp (print(", exp | "))
		| ERROR   COMMA exp (print(", exp| "))

declarationlist: declaration          ()
				 |declarationlist declaration ()

declaration: typedeclaration ()
			|variabledeclaration   ()
			|functiondeclaration   ()

variabledeclaration: VAR ID ASSIGN exp ("given to var " ^ ID ^ " | ")
					 |VAR ID COLON ID ASSIGN exp ("given to var " ^ ID1 ^ " expected type " ^ ID2 ^ " | ")

functiondeclaration: FUNCTION ID LPAREN typefields RPAREN EQ exp (print("create function " ^ ID ^ " | "))
					 |FUNCTION ID LPAREN typefields RPAREN COLON ID EQ exp (print("create function " ^ ID1 ^ " expect type " ^ ID2 ^ " | "))

field: ID EQ exp             (print(ID ^ " = | "))
	   | field COMMA ID EQ exp (print(", " ^ ID ^ " = | "))

typedeclaration: TYPE ID EQ type (print("type_ " ^ ID ^ " = type_ | "))

type: ID                        ()
    | LBRACE typefields RBRACE  (print("[ fields ] | "))
    | LBRACE RBRACE             (print("[] | "))
    | ARRAY OF ID               (print("Array of " ^ ID ^ " | "))

typefields: typefield                   ()
           | typefields COMMA typefield (print(", | "))

typefield: ID COLON ID (print(ID1 ^ " : " ^ ID2 ^ " | "))
